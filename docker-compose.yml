services:
  client:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Expose port 80 for the React app
    container_name: front-end
    networks:
      - app-network
    env_file:
      - .env  # Reference the .env file
    depends_on:
      - db  # Ensure the database starts before the server
    stdin_open: true
    tty: true

  server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: back-end
    ports:
      - "3000:3000"  # Expose port 3000 for the Node.js app
    networks:
      - app-network
    env_file:
      - .env  # Reference the .env file
    depends_on:
      - db  # Ensure the database starts before the server

  db:
    image: postgres:13  # Use the official PostgreSQL image
    restart: always
    environment:
      POSTGRES_USER: postgres  # Change this to your desired user
      POSTGRES_PASSWORD: root  # Change this to your desired password
      POSTGRES_DB: acl  # Change this to your desired database name
    ports:
      - "5432:5432"  # Expose port 5432 for PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    


  nginx:
      build: 
        context: nginx
      container_name: nginx
      restart: always
      tty: true
      ports: 
        - "8000:80"
      networks:
        app-network:
          aliases:
            - server
            - client
      depends_on:
        - client
        - server
        
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:  # Define a volume for PostgreSQL data persistence
    external: false

# docker-compose up -d --build          
# docker-compose down
# docker-compose down --volumes --remove-orphans

#test
#docker-compose run --rm server sh